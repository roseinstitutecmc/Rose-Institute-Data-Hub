---
title: "Housing Data"
format:
  html:
    widget: true
jupyter: python3
execute:
  echo: false
  output: true
---

## Overview

This page presents housing information for all incorporated cities in California, including:

- Rent prices 
- Housing Stock
- Homes Built

The data is drawn from public datasets and has been cleaned for clarity and consistency. Use the map, table, and charts below to explore.


## Housing Data: All Cities

Use the table below to explore housing data by city.

<!-- 🔍 Search bar -->
<input
  type="text"
  id="searchInput"
  onkeyup="filterTable()"
  placeholder="Search the table..."
  style="margin-bottom: 4px; padding: 10px; width: 100%; max-width: 400px;"
>

<script>
let currentPage = 1;
const rowsPerPage = 10;

function filterTable() {
  currentPage = 1;
  renderTable();
}

function sortTable(n) {
  const table = document.getElementById("mytable");
  const rows = Array.from(table.querySelectorAll("tbody tr"));
  const dir = table.dataset.sortDir === "asc" ? "desc" : "asc";
  table.dataset.sortDir = dir;
  table.dataset.sortCol = n;

  rows.sort((a, b) => {
    const cellA = a.children[n].textContent.trim().toLowerCase();
    const cellB = b.children[n].textContent.trim().toLowerCase();
    if (!isNaN(cellA) && !isNaN(cellB)) {
      return dir === "asc" ? cellA - cellB : cellB - cellA;
    }
    return dir === "asc"
      ? cellA.localeCompare(cellB)
      : cellB.localeCompare(cellA);
  });

  const tbody = table.querySelector("tbody");
  tbody.innerHTML = "";
  rows.forEach(row => tbody.appendChild(row));

  renderTable();
}

function renderTable() {
  const input = document.getElementById("searchInput").value.toLowerCase();
  const table = document.getElementById("mytable");
  const rows = Array.from(table.querySelectorAll("tbody tr"));

  // Filter
  let filteredRows = rows.filter(row =>
    row.textContent.toLowerCase().includes(input)
  );

  // Paginate
  rows.forEach(row => row.classList.add("hidden"));
  const start = (currentPage - 1) * rowsPerPage;
  const end = start + rowsPerPage;
  filteredRows.slice(start, end).forEach(row => row.classList.remove("hidden"));

  // Pagination Controls
  const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
  const paginationDiv = document.getElementById("pagination");
  paginationDiv.innerHTML = "";
  for (let i = 1; i <= totalPages; i++) {
    let btn = document.createElement("button");
    btn.innerText = i;
    btn.style.marginRight = "5px";
    if (i === currentPage) btn.classList.add("active-page");
    btn.onclick = () => {
      currentPage = i;
      renderTable();
    };
    paginationDiv.appendChild(btn);
  }
}

document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll("#mytable th").forEach((th, i) => {
    th.onclick = () => sortTable(i);
  });
  renderTable();
});
</script>

```{python}
#| echo: false
import pandas as pd
from IPython.display import HTML

df = pd.read_csv("housing.csv")
df = df.round(3)
HTML(df.to_html(index=False, table_id="mytable", classes="styled-table"))
```
<div id="table-controls" style="display: flex; justify-content: space-between; align-items: center; margin-top: 12px;">
  <div id="pagination"></div>

  <a href="housing.csv" download="housing.csv">
    <button
      class="city-button">
      Download CSV
    </button>
  </a>
</div>


## Interactive Map of Cities

Use the map below to explore housing data by city. Select a variable and then hover over a city. The darker the shape, the higher the value.

```{python}
import geopandas as gpd
import pandas as pd
import folium
from branca.colormap import linear

# ─── Data prep ──────────────────────────────────────────────────────────────
gdf = gpd.read_file("tl_2024_06_place.shp")
gdf = gdf[(gdf.LSAD=="25") & (gdf.STATEFP=="06")]
gdf["CITY_NAME"] = gdf.NAME.str.upper()

city_data = pd.read_csv("housing.csv")
city_data["CITY_NAME"] = city_data["City"].str.strip().str.upper()
vars_to_plot = [
    "Total Housing Stock",
    "% of Homes that are Vacant",
    "% of Rentals Vacant",
    "% of Occupied Housing Units Owned",
    "Median Owned Home Value",
    "% of Occupied Homes worth over $1 Million",
    "Median Monthly Rent",
    "% of Renters Cost-Burdened",
    "% of Homes Cost Burdened",
    "% of Homes built since 2010",
    "% of Occupied Units Overcrowded",
    "% of Units that are Short-Term Rentals"
]
initial = vars_to_plot[0]

merged = (
    gdf[["CITY_NAME", "geometry"]]
    .merge(city_data[["CITY_NAME"] + vars_to_plot], on="CITY_NAME")
)


# ─── Build colormap dict ────────────────────────────────────────────────────
colormaps = {
  var: linear.Reds_09.scale(merged[var].min(), merged[var].max())
  for var in vars_to_plot
}

# ─── Create Folium map ──────────────────────────────────────────────────────
m = folium.Map(location=[34.0, -118.2], zoom_start=9, tiles=None)
folium.TileLayer(
  tiles="https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png",
  attr="&copy; CARTO",
  control=False
).add_to(m)

# ─── Add GeoJson layers with hover tooltip ──────────────────────────────────
def style_fn(var):
    cmap = colormaps[var]
    def fn(feature):
        val = feature["properties"].get(var)
        if val is None or pd.isna(val):
            return {
                "fillColor": "#cccccc",  # light gray for missing data
                "color": "black",
                "weight": 0.3,
                "fillOpacity": 0.3
            }
        return {
            "fillColor": cmap(val),
            "color": "black",
            "weight": 0.3,
            "fillOpacity": 0.7
        }
    return fn

for var in vars_to_plot:
    folium.GeoJson(
      merged.__geo_interface__,
      style_function=style_fn(var),
      tooltip=folium.GeoJsonTooltip(
        fields=["CITY_NAME", var],
        aliases=["City:", f"{var}:"],
        localize=True
      ),
      name=var,
      overlay=False,
      show=(var==initial)
    ).add_to(m)

folium.LayerControl(collapsed=False).add_to(m)

# ─── Display the map! ──────────────────────────────────────────────────────
m
```

Sources available upon request | Visualization: Deborah Aguirre CMC’28

## Heatmap: Housing Variables by City

```{python}
#| echo: false
import pandas as pd
import plotly.express as px

# Load your data
df = pd.read_csv("housing.csv")

# ✅ Only keep demographic percentage columns (no income)
cols_to_use = [
    "% of Homes that are Vacant",
    "% of Rentals Vacant",
    "% of Occupied Housing Units Owned",
    "% of Occupied Homes worth over $1 Million",
    "% of Renters Cost-Burdened",
    "% of Homes Cost Burdened",
    "% of Homes built since 2010",
    "% of Occupied Units Overcrowded",
    "% of Units that are Short-Term Rentals"
]

# Set city names as index
heatmap_df = df[["City"] + cols_to_use].set_index("City")

# Optional: sort by a demographic column (e.g. Latino %)
heatmap_df = heatmap_df.sort_values(by="% of Homes that are Vacant", ascending=False)

# Create Plotly heatmap
fig = px.imshow(
    heatmap_df,
    color_continuous_scale="Reds",
    aspect="auto",
    labels=dict(x="Housing Variable", y="City", color="Percent"),
    title="Housing Composition by City"
)

fig.update_layout(
    height=800,
    margin=dict(l=100, r=20, t=60, b=20)
)

fig
```
