{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Demographic Data\"\n",
        "format: html\n",
        "jupyter: python3\n",
        "execute:\n",
        "  echo: false\n",
        "  output: false\n",
        "---\n",
        "\n",
        "\n",
        "## Overview\n",
        "\n",
        "This page presents demographic information for all incorporated cities in California, including:\n",
        "\n",
        "- Population totals  \n",
        "- Racial and ethnic composition  \n",
        "- Median household income  \n",
        "\n",
        "The data is drawn from public datasets and has been cleaned for clarity and consistency. Use the map, table, and charts below to explore.\n",
        "\n",
        "\n",
        "## Demographic Data: All Cities\n",
        "\n",
        "Use the table below to explore demographic data by city.\n",
        "\n",
        "<!-- 🔍 Search bar -->\n",
        "<input\n",
        "  type=\"text\"\n",
        "  id=\"searchInput\"\n",
        "  onkeyup=\"filterTable()\"\n",
        "  placeholder=\"Search the table...\"\n",
        "  style=\"margin-bottom: 4px; padding: 10px; width: 100%; max-width: 400px;\"\n",
        ">\n",
        "\n",
        "<script>\n",
        "let currentPage = 1;\n",
        "const rowsPerPage = 10;\n",
        "\n",
        "function filterTable() {\n",
        "  currentPage = 1;\n",
        "  renderTable();\n",
        "}\n",
        "\n",
        "function sortTable(n) {\n",
        "  const table = document.getElementById(\"mytable\");\n",
        "  const rows = Array.from(table.querySelectorAll(\"tbody tr\"));\n",
        "  const dir = table.dataset.sortDir === \"asc\" ? \"desc\" : \"asc\";\n",
        "  table.dataset.sortDir = dir;\n",
        "  table.dataset.sortCol = n;\n",
        "\n",
        "  rows.sort((a, b) => {\n",
        "    const cellA = a.children[n].textContent.trim().toLowerCase();\n",
        "    const cellB = b.children[n].textContent.trim().toLowerCase();\n",
        "    if (!isNaN(cellA) && !isNaN(cellB)) {\n",
        "      return dir === \"asc\" ? cellA - cellB : cellB - cellA;\n",
        "    }\n",
        "    return dir === \"asc\"\n",
        "      ? cellA.localeCompare(cellB)\n",
        "      : cellB.localeCompare(cellA);\n",
        "  });\n",
        "\n",
        "  const tbody = table.querySelector(\"tbody\");\n",
        "  tbody.innerHTML = \"\";\n",
        "  rows.forEach(row => tbody.appendChild(row));\n",
        "\n",
        "  renderTable();\n",
        "}\n",
        "\n",
        "function renderTable() {\n",
        "  const input = document.getElementById(\"searchInput\").value.toLowerCase();\n",
        "  const table = document.getElementById(\"mytable\");\n",
        "  const rows = Array.from(table.querySelectorAll(\"tbody tr\"));\n",
        "\n",
        "  // Filter\n",
        "  let filteredRows = rows.filter(row =>\n",
        "    row.textContent.toLowerCase().includes(input)\n",
        "  );\n",
        "\n",
        "  // Paginate\n",
        "  rows.forEach(row => row.classList.add(\"hidden\"));\n",
        "  const start = (currentPage - 1) * rowsPerPage;\n",
        "  const end = start + rowsPerPage;\n",
        "  filteredRows.slice(start, end).forEach(row => row.classList.remove(\"hidden\"));\n",
        "\n",
        "  // Pagination Controls\n",
        "  const totalPages = Math.ceil(filteredRows.length / rowsPerPage);\n",
        "  const paginationDiv = document.getElementById(\"pagination\");\n",
        "  paginationDiv.innerHTML = \"\";\n",
        "  for (let i = 1; i <= totalPages; i++) {\n",
        "    let btn = document.createElement(\"button\");\n",
        "    btn.innerText = i;\n",
        "    btn.style.marginRight = \"5px\";\n",
        "    if (i === currentPage) btn.classList.add(\"active-page\");\n",
        "    btn.onclick = () => {\n",
        "      currentPage = i;\n",
        "      renderTable();\n",
        "    };\n",
        "    paginationDiv.appendChild(btn);\n",
        "  }\n",
        "}\n",
        "\n",
        "document.addEventListener(\"DOMContentLoaded\", () => {\n",
        "  document.querySelectorAll(\"#mytable th\").forEach((th, i) => {\n",
        "    th.onclick = () => sortTable(i);\n",
        "  });\n",
        "  renderTable();\n",
        "});\n",
        "</script>\n"
      ],
      "id": "e3bcacb1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import pandas as pd\n",
        "from IPython.display import HTML\n",
        "\n",
        "df = pd.read_csv(\"cleaned_citydatademoCSV.csv\")\n",
        "HTML(df.to_html(index=False, table_id=\"mytable\", classes=\"styled-table\"))"
      ],
      "id": "555fe91d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div id=\"table-controls\" style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 12px;\">\n",
        "  <div id=\"pagination\"></div>\n",
        "\n",
        "  <a href=\"cleaned_citydatademoCSV.csv\" download=\"california_demographics.csv\">\n",
        "    <button\n",
        "      class=\"city-button\">\n",
        "      Download CSV\n",
        "    </button>\n",
        "  </a>\n",
        "</div>\n",
        "\n",
        "\n",
        "## Interactive Map of Cities\n",
        "\n",
        "Use the map below to explore demographic data by city. Select a variable and then hover a city to view population, income, and racial/ethnic breakdown.\n"
      ],
      "id": "23edc94a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "import json\n",
        "import numpy as np\n",
        "import ipywidgets as widgets\n",
        "from ipyleaflet import Map, GeoJSON, WidgetControl, basemaps\n",
        "from ipywidgets import HTML\n",
        "import branca\n",
        "\n",
        "# ─── 1) Load & filter CA places ─────────────────────────────────────────────\n",
        "gdf = gpd.read_file(\"tl_2024_06_place.shp\")\n",
        "gdf = gdf[(gdf.LSAD == \"25\") & (gdf.STATEFP == \"06\")]\n",
        "gdf[\"CITY_NAME\"] = gdf.NAME.str.upper()\n",
        "\n",
        "# ─── 2) Merge with your city stats ──────────────────────────────────────────\n",
        "city_data = pd.read_csv(\"cleaned_citydatademoCSV.csv\")\n",
        "city_data[\"CITY_NAME\"] = city_data[\"City Name\"].str.upper()\n",
        "\n",
        "vars_to_plot = [\n",
        "    \"Latino %\",\"White %\",\"Black %\",\"Asian %\",\n",
        "    \"Native %\",\"PI %\",\"Other %\",\"Multiracial %\",\n",
        "    \"Total Population\",\"Median Household Income\"\n",
        "]\n",
        "\n",
        "merged = (\n",
        "    gdf[[\"CITY_NAME\",\"geometry\"]]\n",
        "    .merge(city_data[[\"CITY_NAME\"] + vars_to_plot], on=\"CITY_NAME\")\n",
        ")\n",
        "\n",
        "# ─── 3) Pre‑serialize to GeoJSON once ────────────────────────────────────────\n",
        "geojson_data = json.loads(merged.to_json())\n",
        "\n",
        "# right after you filter gdf:\n",
        "# choose a tolerance that preserves city‐shapes but drops lots of tiny vertices\n",
        "gdf[\"geometry\"] = gdf[\"geometry\"].simplify(tolerance=0.001, preserve_topology=True)\n",
        "\n",
        "# then continue with your merge+to_json\n",
        "geojson_data = json.loads(merged.to_json())\n",
        "\n",
        "# ─── 4) Build base map with no‑street tiles ─────────────────────────────────\n",
        "m = Map(\n",
        "    center=(34.0, -118.2),\n",
        "    zoom=9,\n",
        "    basemap=basemaps.CartoDB.PositronNoLabels\n",
        ")\n",
        "\n",
        "# placeholders\n",
        "geo_layer     = None\n",
        "legend_ctrl   = None\n",
        "\n",
        "# ─── 5) Helper to make a branca colormap for a variable ─────────────────────\n",
        "def make_colormap(var):\n",
        "    vmin, vmax = merged[var].min(), merged[var].max()\n",
        "    return branca.colormap.LinearColormap(\n",
        "        ['#fee5d9','#a50f15'], vmin=vmin, vmax=vmax, caption=var\n",
        "    )\n",
        "\n",
        "# ─── 6) Style‐function factory ───────────────────────────────────────────────\n",
        "def style_fn_factory(var, cmap):\n",
        "    def style_fn(feature):\n",
        "        val = feature['properties'][var]\n",
        "        return {\n",
        "            'fillColor': cmap(val),\n",
        "            'color':   'black',\n",
        "            'weight':  0.3,\n",
        "            'fillOpacity': 0.7\n",
        "        }\n",
        "    return style_fn\n",
        "\n",
        "# ─── 7) Add one GeoJSON layer, initial var ─────────────────────────────────\n",
        "initial_var = vars_to_plot[0]\n",
        "cmap = make_colormap(initial_var)\n",
        "\n",
        "geo_layer = GeoJSON(\n",
        "    data=geojson_data,\n",
        "    style_callback=style_fn_factory(initial_var, cmap),\n",
        "    hover_style={'fillOpacity': 1.0}\n",
        ")\n",
        "m.add_layer(geo_layer)\n",
        "\n",
        "# legend via HTML widget\n",
        "legend = HTML(cmap._repr_html_())\n",
        "legend_ctrl = WidgetControl(widget=legend, position='bottomright')\n",
        "m.add_control(legend_ctrl)\n",
        "\n",
        "# ─── 8) Dropdown & callback ────────────────────────────────────────────────\n",
        "dropdown = widgets.Dropdown(options=vars_to_plot, value=initial_var, description='Variable:')\n",
        "def on_var_change(change):\n",
        "    var = change['new']\n",
        "    new_cmap = make_colormap(var)\n",
        "    geo_layer.style_callback = style_fn_factory(var, new_cmap)\n",
        "    # update legend HTML\n",
        "    legend.value = new_cmap._repr_html_()\n",
        "\n",
        "dropdown.observe(on_var_change, names='value')\n",
        "\n",
        "# ─── 9) Display ────────────────────────────────────────────────────────────\n",
        "display(widgets.VBox([dropdown, m]))"
      ],
      "id": "5cd53f9f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Heatmap: Demographic Variables by City\n"
      ],
      "id": "7d8fcf7e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# Load your data\n",
        "df = pd.read_csv(\"cleaned_citydatademoCSV.csv\")\n",
        "\n",
        "# ✅ Only keep demographic percentage columns (no income)\n",
        "cols_to_use = [\n",
        "    \"Latino %\",\n",
        "    \"White %\",\n",
        "    \"Black %\",\n",
        "    \"Asian %\",\n",
        "    \"Native %\",\n",
        "    \"PI %\",\n",
        "    \"Other %\",\n",
        "    \"Multiracial %\"\n",
        "]\n",
        "\n",
        "\n",
        "# Set city names as index\n",
        "heatmap_df = df[[\"City Name\"] + cols_to_use].set_index(\"City Name\")\n",
        "\n",
        "# Optional: sort by a demographic column (e.g. Latino %)\n",
        "heatmap_df = heatmap_df.sort_values(by=\"Latino %\", ascending=False)\n",
        "\n",
        "# Create Plotly heatmap\n",
        "fig = px.imshow(\n",
        "    heatmap_df,\n",
        "    color_continuous_scale=\"Reds\",\n",
        "    aspect=\"auto\",\n",
        "    labels=dict(x=\"Demographic Variable\", y=\"City\", color=\"Percent\"),\n",
        "    title=\"Demographic Composition by City\"\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    height=800,\n",
        "    margin=dict(l=100, r=20, t=60, b=20)\n",
        ")\n",
        "\n",
        "fig"
      ],
      "id": "2c1f0b5a",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\prett\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}