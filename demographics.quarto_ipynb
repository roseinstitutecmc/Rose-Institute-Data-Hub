{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Demographic Data\"\n",
        "format: html\n",
        "jupyter: python3\n",
        "execute:\n",
        "  echo: false\n",
        "  output: false\n",
        "---\n",
        "\n",
        "\n",
        "## Overview\n",
        "\n",
        "This page presents demographic information for all incorporated cities in California, including:\n",
        "\n",
        "- Population totals  \n",
        "- Racial and ethnic composition  \n",
        "- Median household income  \n",
        "\n",
        "The data is drawn from public datasets and has been cleaned for clarity and consistency. Use the map, table, and charts below to explore.\n",
        "\n",
        "\n",
        "## Demographic Data: All Cities\n",
        "\n",
        "Use the table below to explore demographic data by city.\n",
        "\n",
        "<!-- 🔍 Search bar -->\n",
        "<input\n",
        "  type=\"text\"\n",
        "  id=\"searchInput\"\n",
        "  onkeyup=\"filterTable()\"\n",
        "  placeholder=\"Search the table...\"\n",
        "  style=\"margin-bottom: 4px; padding: 10px; width: 100%; max-width: 400px;\"\n",
        ">\n",
        "\n",
        "<script>\n",
        "let currentPage = 1;\n",
        "const rowsPerPage = 10;\n",
        "\n",
        "function filterTable() {\n",
        "  currentPage = 1;\n",
        "  renderTable();\n",
        "}\n",
        "\n",
        "function sortTable(n) {\n",
        "  const table = document.getElementById(\"mytable\");\n",
        "  const rows = Array.from(table.querySelectorAll(\"tbody tr\"));\n",
        "  const dir = table.dataset.sortDir === \"asc\" ? \"desc\" : \"asc\";\n",
        "  table.dataset.sortDir = dir;\n",
        "  table.dataset.sortCol = n;\n",
        "\n",
        "  rows.sort((a, b) => {\n",
        "    const cellA = a.children[n].textContent.trim().toLowerCase();\n",
        "    const cellB = b.children[n].textContent.trim().toLowerCase();\n",
        "    if (!isNaN(cellA) && !isNaN(cellB)) {\n",
        "      return dir === \"asc\" ? cellA - cellB : cellB - cellA;\n",
        "    }\n",
        "    return dir === \"asc\"\n",
        "      ? cellA.localeCompare(cellB)\n",
        "      : cellB.localeCompare(cellA);\n",
        "  });\n",
        "\n",
        "  const tbody = table.querySelector(\"tbody\");\n",
        "  tbody.innerHTML = \"\";\n",
        "  rows.forEach(row => tbody.appendChild(row));\n",
        "\n",
        "  renderTable();\n",
        "}\n",
        "\n",
        "function renderTable() {\n",
        "  const input = document.getElementById(\"searchInput\").value.toLowerCase();\n",
        "  const table = document.getElementById(\"mytable\");\n",
        "  const rows = Array.from(table.querySelectorAll(\"tbody tr\"));\n",
        "\n",
        "  // Filter\n",
        "  let filteredRows = rows.filter(row =>\n",
        "    row.textContent.toLowerCase().includes(input)\n",
        "  );\n",
        "\n",
        "  // Paginate\n",
        "  rows.forEach(row => row.classList.add(\"hidden\"));\n",
        "  const start = (currentPage - 1) * rowsPerPage;\n",
        "  const end = start + rowsPerPage;\n",
        "  filteredRows.slice(start, end).forEach(row => row.classList.remove(\"hidden\"));\n",
        "\n",
        "  // Pagination Controls\n",
        "  const totalPages = Math.ceil(filteredRows.length / rowsPerPage);\n",
        "  const paginationDiv = document.getElementById(\"pagination\");\n",
        "  paginationDiv.innerHTML = \"\";\n",
        "  for (let i = 1; i <= totalPages; i++) {\n",
        "    let btn = document.createElement(\"button\");\n",
        "    btn.innerText = i;\n",
        "    btn.style.marginRight = \"5px\";\n",
        "    if (i === currentPage) btn.classList.add(\"active-page\");\n",
        "    btn.onclick = () => {\n",
        "      currentPage = i;\n",
        "      renderTable();\n",
        "    };\n",
        "    paginationDiv.appendChild(btn);\n",
        "  }\n",
        "}\n",
        "\n",
        "document.addEventListener(\"DOMContentLoaded\", () => {\n",
        "  document.querySelectorAll(\"#mytable th\").forEach((th, i) => {\n",
        "    th.onclick = () => sortTable(i);\n",
        "  });\n",
        "  renderTable();\n",
        "});\n",
        "</script>\n"
      ],
      "id": "be0d2790"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import pandas as pd\n",
        "from IPython.display import HTML\n",
        "\n",
        "df = pd.read_csv(\"cleaned_citydatademoCSV.csv\")\n",
        "HTML(df.to_html(index=False, table_id=\"mytable\", classes=\"styled-table\"))"
      ],
      "id": "9d5ec0ce",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div id=\"table-controls\" style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 12px;\">\n",
        "  <div id=\"pagination\"></div>\n",
        "\n",
        "  <a href=\"cleaned_citydatademoCSV.csv\" download=\"california_demographics.csv\">\n",
        "    <button\n",
        "      class=\"city-button\">\n",
        "      Download CSV\n",
        "    </button>\n",
        "  </a>\n",
        "</div>\n",
        "\n",
        "\n",
        "## Interactive Map of Cities\n",
        "\n",
        "Use the map below to explore demographic data by city. Select a variable and then hover a city to view population, income, and racial/ethnic breakdown.\n"
      ],
      "id": "2c200c5e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "import folium\n",
        "import ipywidgets as widgets\n",
        "import numpy as np\n",
        "from IPython.display import display, clear_output\n",
        "\n",
        "# Load spatial and demographic data.\n",
        "gdf = gpd.read_file(\"tl_2024_06_place.shp\")\n",
        "city_data = pd.read_csv(\"cleaned_citydatademoCSV.csv\")\n",
        "\n",
        "# Standardize city names.\n",
        "gdf[\"CITY_NAME\"] = gdf[\"NAME\"].str.upper()\n",
        "city_data[\"CITY_NAME\"] = city_data[\"City Name\"].str.upper()\n",
        "\n",
        "# Filter and merge datasets.\n",
        "gdf = gdf[gdf[\"LSAD\"] == \"25\"]\n",
        "merged = gdf.merge(city_data, on=\"CITY_NAME\")\n",
        "\n",
        "# Define a function to generate the updated map based on a selected variable.\n",
        "def update_map(selected_var):\n",
        "    # Create a base map.\n",
        "    m = folium.Map(\n",
        "        location=[34.0, -118.2],\n",
        "        zoom_start=9,\n",
        "        tiles='https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png',\n",
        "        attr='&copy; <a href=\"https://carto.com/\">Carto</a>'\n",
        "    )\n",
        "    \n",
        "    # Compute equal-width bins using np.linspace.\n",
        "    min_val = merged[selected_var].min()\n",
        "    max_val = merged[selected_var].max()\n",
        "    bins = np.linspace(min_val, max_val, num=6).tolist()  # 6 evenly spaced bins\n",
        "    \n",
        "    # Add a choropleth layer for the chosen variable.\n",
        "    folium.Choropleth(\n",
        "        geo_data=merged,\n",
        "        data=merged,\n",
        "        columns=[\"CITY_NAME\", selected_var],\n",
        "        key_on=\"feature.properties.CITY_NAME\",\n",
        "        fill_color=\"Reds\",  # Colors range from red (low) to green (high).\n",
        "        fill_opacity=0.7,\n",
        "        line_opacity=0.2,\n",
        "        legend_name=\"\",  # Remove default legend text.\n",
        "        bins=bins,\n",
        "        smooth_factor=0,\n",
        "    ).add_to(m)\n",
        "    \n",
        "    # Overlay a transparent GeoJson layer with tooltips on hover.\n",
        "    tooltip = folium.GeoJsonTooltip(\n",
        "        fields=[\"CITY_NAME\", selected_var],\n",
        "        aliases=[\"City: \", f\"{selected_var}: \"],\n",
        "        localize=True\n",
        "    )\n",
        "    folium.GeoJson(\n",
        "        merged,\n",
        "        name=\"City Info\",\n",
        "        tooltip=tooltip,\n",
        "        style_function=lambda feature: {\n",
        "            'fillColor': 'transparent',\n",
        "            'color': 'transparent',\n",
        "            'weight': 0,\n",
        "            'fillOpacity': 0\n",
        "        }\n",
        "    ).add_to(m)\n",
        "    \n",
        "    return m\n",
        "\n",
        "# Create a dropdown widget for variable selection.\n",
        "dropdown = widgets.Dropdown(\n",
        "    options=[\n",
        "    \"Latino %\",\n",
        "    \"White %\",\n",
        "    \"Black %\",\n",
        "    \"Asian %\",\n",
        "    \"Native %\",\n",
        "    \"PI %\",\n",
        "    \"Other %\",\n",
        "    \"Multiracial %\",\n",
        "    \"Total Population\",\n",
        "    \"Median Household Income\"],\n",
        "    description=\"Variable:\"\n",
        ")\n",
        "\n",
        "# Create an output widget to display the map.\n",
        "output = widgets.Output()\n",
        "\n",
        "# Define an event handler for changes in the dropdown selection.\n",
        "def on_change(change):\n",
        "    if change['type'] == 'change' and change['name'] == 'value':\n",
        "        with output:\n",
        "            clear_output(wait=True)\n",
        "            updated_map = update_map(change['new'])\n",
        "            display(updated_map)\n",
        "\n",
        "dropdown.observe(on_change)\n",
        "\n",
        "# Display the dropdown and the output widget.\n",
        "display(dropdown, output)\n",
        "\n",
        "# Optionally, display the initial map using the default dropdown value.\n",
        "with output:\n",
        "    initial_map = update_map(dropdown.value)\n",
        "    display(initial_map)"
      ],
      "id": "bb16e246",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Heatmap: Demographic Variables by City\n"
      ],
      "id": "e8d29047"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# Load your data\n",
        "df = pd.read_csv(\"cleaned_citydatademoCSV.csv\")\n",
        "\n",
        "# ✅ Only keep demographic percentage columns (no income)\n",
        "cols_to_use = [\n",
        "    \"Latino %\",\n",
        "    \"White %\",\n",
        "    \"Black %\",\n",
        "    \"Asian %\",\n",
        "    \"Native %\",\n",
        "    \"PI %\",\n",
        "    \"Other %\",\n",
        "    \"Multiracial %\"\n",
        "]\n",
        "\n",
        "\n",
        "# Set city names as index\n",
        "heatmap_df = df[[\"City Name\"] + cols_to_use].set_index(\"City Name\")\n",
        "\n",
        "# Optional: sort by a demographic column (e.g. Latino %)\n",
        "heatmap_df = heatmap_df.sort_values(by=\"Latino %\", ascending=False)\n",
        "\n",
        "# Create Plotly heatmap\n",
        "fig = px.imshow(\n",
        "    heatmap_df,\n",
        "    color_continuous_scale=\"Reds\",\n",
        "    aspect=\"auto\",\n",
        "    labels=dict(x=\"Demographic Variable\", y=\"City\", color=\"Percent\"),\n",
        "    title=\"Demographic Composition by City\"\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    height=800,\n",
        "    margin=dict(l=100, r=20, t=60, b=20)\n",
        ")\n",
        "\n",
        "fig"
      ],
      "id": "61e45827",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\prett\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}